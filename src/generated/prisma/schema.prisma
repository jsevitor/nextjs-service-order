// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String // hash, claro!
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ordersCreated  Order[] @relation("OrdersCreated")
  ordersAssigned Order[] @relation("OrdersAssigned")

  comments  Comment[]
  orderLogs OrderLog[]
}

model Order {
  id          String        @id @default(uuid())
  title       String
  description String
  status      OrderStatus   @default(PENDING)
  priority    OrderPriority @default(NORMAL)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  createdById String
  createdBy   User   @relation("OrdersCreated", fields: [createdById], references: [id])

  assignedToId String?
  assignedTo   User?   @relation("OrdersAssigned", fields: [assignedToId], references: [id])

  comments    Comment[]
  attachments Attachment[]
  logs        OrderLog[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  authorId String
  author   User   @relation(fields: [authorId], references: [id])
}

model Attachment {
  id         String   @id @default(uuid())
  filename   String
  url        String
  uploadedAt DateTime @default(now())

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])
}

model OrderLog {
  id        String   @id @default(uuid())
  action    String
  timestamp DateTime @default(now())

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  TECHNICIAN
  CLIENT
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CLOSED
  CANCELED
}

enum OrderPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}
